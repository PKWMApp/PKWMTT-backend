DROP TABLE IF EXISTS events_superior_group;
DROP TABLE IF EXISTS events;
DROP TABLE IF EXISTS representatives;
DROP TABLE IF EXISTS student_codes;
DROP TABLE IF EXISTS exams_groups;
DROP TABLE IF EXISTS exams;
DROP TABLE IF EXISTS superior_groups;
DROP TABLE IF EXISTS exam_types;
DROP TABLE IF EXISTS student_groups;
DROP TABLE IF EXISTS moderators;
DROP TABLE IF EXISTS api_keys;
DROP TABLE IF EXISTS admin_keys;

CREATE TABLE superior_groups (
    superior_group_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL
);

CREATE TABLE representatives (
    representative_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    superior_group_id INT NOT NULL,
    email VARCHAR(255) NOT NULL,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    CONSTRAINT fk_representatives_superior_group FOREIGN KEY (superior_group_id)
        REFERENCES superior_groups (superior_group_id) ON DELETE CASCADE
);

CREATE TABLE student_codes (
    student_code_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    code VARCHAR(255) NOT NULL,
    expire DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    superior_group_id INT NOT NULL,
    usage_count INT,
    usage_limit INT,
    CONSTRAINT fk_student_codes_superior_group FOREIGN KEY (superior_group_id)
        REFERENCES superior_groups (superior_group_id) ON DELETE CASCADE
);

CREATE TABLE student_groups (
    group_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE
);

CREATE TABLE exam_types (
    exam_type_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL
);

CREATE TABLE exams (
    exam_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description VARCHAR(255),
    exam_date DATETIME NOT NULL,
    exam_type_id INT NOT NULL,
    CONSTRAINT fk_exams_exam_type FOREIGN KEY (exam_type_id)
        REFERENCES exam_types (exam_type_id) ON DELETE CASCADE
);

CREATE TABLE exams_groups (
    exam_group_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    exam_id INT NOT NULL,
    group_id INT NOT NULL,
    CONSTRAINT fk_exams_groups_exam FOREIGN KEY (exam_id)
        REFERENCES exams (exam_id) ON DELETE CASCADE,
    CONSTRAINT fk_exams_groups_group FOREIGN KEY (group_id)
        REFERENCES student_groups (group_id) ON DELETE CASCADE
);

CREATE TABLE events (
    event_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description VARCHAR(255),
    start_date DATETIME,
    end_date DATETIME
);

CREATE TABLE events_superior_group (
    row_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    event_id INT NOT NULL,
    superior_group_id INT NOT NULL,
    CONSTRAINT fk_events_superior_group_event FOREIGN KEY (event_id)
        REFERENCES events (event_id) ON DELETE CASCADE,
    CONSTRAINT fk_events_superior_group_superior FOREIGN KEY (superior_group_id)
        REFERENCES superior_groups (superior_group_id) ON DELETE CASCADE
);

CREATE TABLE moderators (
    moderator_id VARCHAR(36) PRIMARY KEY,
    password VARCHAR(255) NOT NULL,
    role VARCHAR(50)
);

CREATE TABLE api_keys (
    key_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "value" VARCHAR(255) NOT NULL,
    description VARCHAR(255)
);

CREATE TABLE admin_keys (
    key_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "value" VARCHAR(255) NOT NULL,
    description VARCHAR(255)
);

CREATE TABLE user_refresh_tokens (
    token_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    token CHAR(64) NOT NULL,
    representative_id INT NOT NULL,
    created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    expires_at DATETIME NOT NULL,
    CONSTRAINT uq_representative_refresh_token_token UNIQUE (token),
    CONSTRAINT fk_representative_refresh_token_representative FOREIGN KEY (representative_id)
        REFERENCES representatives (representative_id) ON DELETE CASCADE
);

CREATE TABLE moderator_refresh_tokens (
    token_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    token CHAR(64) NOT NULL,
    moderator_id VARCHAR(36) NOT NULL,
    created DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    expires DATETIME NOT NULL,
    CONSTRAINT uq_moderator_refresh_token_token UNIQUE (token),
    CONSTRAINT fk_moderator_refresh_token_moderator FOREIGN KEY (moderator_id)
        REFERENCES moderators (moderator_id) ON DELETE CASCADE
);
